Imports System
Imports System.Diagnostics
Imports System.Drawing
Imports System.Runtime.InteropServices
Imports System.Windows.Forms
Imports System.Net
Imports System.IO
Imports System.Data.Odbc
Imports System.Data
Imports System.Globalization
Imports System.Runtime.InteropServices.ComTypes

Imports Newtonsoft.Json
Imports DirectShowLib


Module Cam_Module

    Enum PlayState
        Stopped
        Paused
        Running
        Init
    End Enum

    Dim CurrentState As PlayState = PlayState.Stopped

    Dim D As Integer = Convert.ToInt32("0X8000", 16)
    Public WM_GRAPHNOTIFY As Integer = D + 1

    Dim VideoWindow As IVideoWindow = Nothing
    Dim MediaControl As IMediaControl = Nothing
    Dim MediaEventEx As IMediaEventEx = Nothing
    Dim GraphBuilder As IGraphBuilder = Nothing
    Dim CaptureGraphBuilder As ICaptureGraphBuilder2 = Nothing

    Dim rot As DsROTEntry = Nothing

    Dim hr As Integer = 0

    Public Sub CaptureVideo()

        Dim sourceFilter As IBaseFilter = Nothing

        Try
            GetInterfaces()

            hr = CaptureGraphBuilder.SetFiltergraph(GraphBuilder) 'Specifies filter graph "graphbuilder" for the capture graph builder "captureGraphBuilder" to use.
            Debug.WriteLine("Attach the filter graph to the capture graph : " & DsError.GetErrorText(hr))
            DsError.ThrowExceptionForHR(hr)

            sourceFilter = FindCaptureDevice()

            hr = GraphBuilder.AddFilter(sourceFilter, "Video Capture")
            Debug.WriteLine("Add capture filter to our graph : " & DsError.GetErrorText(hr))
            DsError.ThrowExceptionForHR(hr)

            hr = CaptureGraphBuilder.RenderStream(PinCategory.Preview, MediaType.Video, sourceFilter, Nothing, Nothing)
            Debug.WriteLine("Render the preview pin on the video capture filter : " & DsError.GetErrorText(hr))
            DsError.ThrowExceptionForHR(hr)

            Marshal.ReleaseComObject(sourceFilter)


            SetupVideoWindow()

            rot = New DsROTEntry(GraphBuilder)

            hr = MediaControl.Run()
            Debug.WriteLine("Start previewing video data : " & DsError.GetErrorText(hr))
            DsError.ThrowExceptionForHR(hr)

            CurrentState = PlayState.Running
            Debug.WriteLine("The currentstate : " & CurrentState.ToString)

        Catch ex As Exception
            MessageBox.Show("An unrecoverable error has occurred.With error : " & ex.ToString)
        End Try
    End Sub
    Public Sub GetInterfaces()
        Dim hr As Integer = 0
        GraphBuilder = CType(New FilterGraph, IGraphBuilder)
        CaptureGraphBuilder = CType(New CaptureGraphBuilder2, ICaptureGraphBuilder2)
        MediaControl = CType(GraphBuilder, IMediaControl)
        VideoWindow = CType(GraphBuilder, IVideoWindow)
        MediaEventEx = CType(GraphBuilder, IMediaEventEx)
        hr = MediaEventEx.SetNotifyWindow(Frm_Gorilla.pic_cam.Handle, WM_GRAPHNOTIFY, IntPtr.Zero) 'This method designates a window as the recipient of messages generated by or sent to the current DirectShow object
        DsError.ThrowExceptionForHR(hr) 'ThrowExceptionForHR is a wrapper for Marshal.ThrowExceptionForHR, but additionally provides descriptions for any DirectShow specific error messages.If the hr value is not a fatal error, no exception will be thrown:
        Debug.WriteLine("I started Sub Get interfaces , the result is : " & DsError.GetErrorText(hr))
    End Sub

    Public Function FindCaptureDevice() As IBaseFilter
        Debug.WriteLine("Start the Sub FindCaptureDevice")
        Dim hr As Integer = 0
        Dim classEnum As IEnumMoniker = Nothing
        Dim moniker As IMoniker() = New IMoniker(0) {}
        Dim source As Object = Nothing
        Dim devEnum As ICreateDevEnum = CType(New CreateDevEnum, ICreateDevEnum)
        hr = devEnum.CreateClassEnumerator(FilterCategory.VideoInputDevice, classEnum, 0)
        Debug.WriteLine("Create an enumerator for the video capture devices : " & DsError.GetErrorText(hr))
        DsError.ThrowExceptionForHR(hr)
        Marshal.ReleaseComObject(devEnum)
        If classEnum Is Nothing Then
            Throw New ApplicationException("No video capture device was detected.\r\n\r\n" & _
                           "Gorilla requires a video capture device, such as a USB WebCam,\r\n" & _
                           "to be installed and working properly.  The sample will now close.")
        End If
        If classEnum.Next(moniker.Length, moniker, IntPtr.Zero) = 0 Then
            Dim iid As Guid = GetType(IBaseFilter).GUID
            moniker(0).BindToObject(Nothing, Nothing, iid, source)
        Else
            Throw New ApplicationException("Unable to access video capture device!")
        End If
        Marshal.ReleaseComObject(moniker(0))
        Marshal.ReleaseComObject(classEnum)
        Return CType(source, IBaseFilter)
    End Function

    Public Sub SetupVideoWindow()
        Dim hr As Integer = 0
        'set the video window to be a child of the main window
        'putowner : Sets the owning parent window for the video playback window. 
        hr = VideoWindow.put_Owner(Frm_Gorilla.pic_cam.Handle)
        DsError.ThrowExceptionForHR(hr)

        hr = VideoWindow.put_WindowStyle(WindowStyle.Child Or WindowStyle.ClipChildren)
        DsError.ThrowExceptionForHR(hr)

        'Use helper function to position video window in client rect of main application window
        ResizeVideoWindow()

        'Make the video window visible, now that it is properly positioned
        'put_visible : This method changes the visibility of the video window. 
        hr = VideoWindow.put_Visible(OABool.True)
        DsError.ThrowExceptionForHR(hr)
    End Sub

    Public Sub ResizeVideoWindow()
        'Resize the video preview window to match owner window size
        'left , top , width , height
        If Not (VideoWindow Is Nothing) Then 'if the videopreview is not nothing
            VideoWindow.SetWindowPosition(0, 0, Frm_Gorilla.pic_cam.Width, Frm_Gorilla.pic_cam.ClientSize.Height)
        End If
    End Sub

    Public Sub closeinterfaces()
        '//stop previewing data
        If Not (MediaControl Is Nothing) Then
            MediaControl.StopWhenReady()
        End If

        CurrentState = PlayState.Stopped

        '//stop recieving events
        If Not (MediaEventEx Is Nothing) Then
            MediaEventEx.SetNotifyWindow(IntPtr.Zero, WM_GRAPHNOTIFY, IntPtr.Zero)
        End If

        '// Relinquish ownership (IMPORTANT!) of the video window.
        '// Failing to call put_Owner can lead to assert failures within
        '// the video renderer, as it still assumes that it has a valid
        '// parent window.
        If Not (VideoWindow Is Nothing) Then
            VideoWindow.put_Visible(OABool.False)
            VideoWindow.put_Owner(IntPtr.Zero)
        End If

        ' // Remove filter graph from the running object table
        If Not (rot Is Nothing) Then
            rot.Dispose()
            rot = Nothing
        End If

        '// Release DirectShow interfaces
        Marshal.ReleaseComObject(MediaControl) : MediaControl = Nothing
        Marshal.ReleaseComObject(MediaEventEx) : MediaEventEx = Nothing
        Marshal.ReleaseComObject(VideoWindow) : VideoWindow = Nothing
        Marshal.ReleaseComObject(GraphBuilder) : GraphBuilder = Nothing
        Marshal.ReleaseComObject(CaptureGraphBuilder) : CaptureGraphBuilder = Nothing

    End Sub

    Public Sub Foto(ByVal ID As String)
        Try
            hr = MediaControl.Pause()

            Dim bmp As New Bitmap(Frm_Gorilla.pic_cam.Width, Frm_Gorilla.pic_cam.Height)
            Using g As Graphics = Graphics.FromImage(bmp)
                Dim pt As Point = Frm_Gorilla.pic_cam.PointToScreen(New Point(0, 0))
                g.CopyFromScreen(pt.X, pt.Y, 0, 0, bmp.Size)
            End Using
            Frm_Gorilla.pic_cam.Image = bmp

            Frm_Gorilla.pic_cam.Image.Save(Tipo & ":\Gorilla_Files\" & ID & ".jpg")

            closeinterfaces()

            CaptureVideo()

        Catch
        End Try
    End Sub




End Module
